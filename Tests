import Programme_BLASCO_DIS_HOUZE as prog
from PIL import Image
## Etape 1

import 1_simple as F
##création de la table vide que nous allons utiliser dans la fonction
def creation_table_vide(n): 
    table=[[" " for j in range(n)]for i in range(n)]
    for k in range(n):
        print(table[k],end="\n")
    return table


##création d'un tableau entièrement plein (le résultat attendu après l'execution de notre fonction remplir_table_vide)
def creation_table_pleine(n):
## on crée donc un tableau par compréhension dont toutes la cases sont occupées par des "X"
    tablep=[["X" for j in range(n)]for i in range(n)]
#on ajuste sa forme afin d'avoir un rendu esthétique et on l'affiche (ce qui n'est pas obligatoire car il a été créé dans le but de vérifier une condition et non de présenter un résultat à l'utilisateur).
    for k in range(n):
        print(tablep[k],end="\n")
#enfin on le renvoie
    return tablep

#afin d'éviter d'avoir à recoder un asset lorsqu'on utilise cette fonction, on crée une fonction plus simple à appeller qui contient notre assert.
def fonct_assert(j,i):
    tablep=creation_table_pleine(10)
    table=remplir_table_vide(j,i)
    assert table==tablep,"Même les miracles prennent un peu de temps..."
    return
#il suffit maintenant d'appeller notre fonction nouvellement créée et de choisir ses arguments.

table_vide = [[" " for i in range(10)] for j in range (10)]

assert prog.remplir_table_vide(j,i,table_vide) == 

## Etape 2

# Pour tester la fonction colorier_image_RGB() ou colorier_image_echelle_gris() c'est compliquer d'effectuer un assert
# car une image est difficilement comparable à une autre et il y a trop de cas différents pour que des assert soient
# pertinents. Par contre nous pouvons mettre ici les différents assert que nous avons utilisées au sein des différentes 
# fonctions dans "Programme_BLASCO_DIS_HOUZE.py"(1). 
# 
# Nous proposons aussi de montrer des exemples d'images obtenues avec 
# les fonctions colorier_image_RGB() et colorier_image_echelle_gris() que nous avons stockées dans le dossier
# "Essais_BLASCO_DIS_HOUZE"(2).

# (1)
#   assert image.format == "JPEG", "Argument invalide : Doit être une image au format JPEG. Veuillez relancer le programme."

# Avec fonction colorier_image_RGB() :
#   assert (type(color) == tuple and len(color) == 3 and
#       type(color[0]) == int and type(color[1]) == int and type(color[2]) == int and
#       color[0] >= 0 and color[0] <= 255 and color[1] >= 0 and color[1] <= 255 and
#       color[2] >= 0 and color[2] <= 255
#       ),"Entrée invalide : Doit être trois entiers -R, G, B- chacun entre 0 et 255. Veuillez relancer le programme."

# Avec la fonction colorier_image_echelle_gris() :
#   assert color >= 0 and color <= 255, "Entrée invalide : Doit être un seul entier entre 0 et 255. Veuillez relancer le programme."

#   assert (len(coordinates) == 2 and
#       (type(coordinates[0]) == int and type(coordinates[1]) == int) and
#       (coordinates[0] >= 0 and coordinates[0] <= ncolumns and coordinates[1] >= 0 and coordinates[1] <= nlines)
#       ),"Entrée invalide : Doit être deux entiers dans les limites de l'image. Veuillez relancer le programme."

#   assert validation == "Faux" or validation == "Vrai", "Entrée invalide : Doit être Vrai ou Faux. Veuillez relancer le programme."


#(2)
# Avec fonction colorier_image_RGB() :
# -> INFO_Projet_1_BLASCO_DIS_HOUZE\Essais_BLASCO_DIS_HOUZE\Exemples_RGB_BLASCO_DIS_HOUZE\GIF_minion_coloration.gif

# Avec la fonction colorier_image_echelle_gris() :
# -> INFO_Projet_1_BLASCO_DIS_HOUZE\Essais_BLASCO_DIS_HOUZE\Exemples_grey_scale_BLASCO_DIS_HOUZE\minion_L_colorized (1).jpg
